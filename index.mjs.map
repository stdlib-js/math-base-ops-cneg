{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport real from '@stdlib/complex-real';\nimport imag from '@stdlib/complex-imag';\nimport Complex128 from '@stdlib/complex-float64';\n\n\n// MAIN //\n\n/**\n* Negates a double-precision complex floating-point number.\n*\n* @param {Complex128} z - complex number\n* @returns {Complex128} result\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var z = new Complex128( -4.2, 5.5 );\n* // returns <Complex128>\n*\n* var out = cneg( z );\n* // returns <Complex128>\n*\n* var re = real( out );\n* // returns 4.2\n*\n* var im = imag( out );\n* // returns -5.5\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var z = new Complex128( 0.0, 0.0 );\n* // returns <Complex128>\n*\n* var out = cneg( z );\n* // returns <Complex128>\n*\n* var re = real( out );\n* // returns -0.0\n*\n* var im = imag( out );\n* // returns -0.0\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64';\n* import real from '@stdlib/complex-real';\n* import imag from '@stdlib/complex-imag';\n*\n* var z = new Complex128( NaN, NaN );\n* // returns <Complex128>\n*\n* var out = cneg( z );\n* // returns <Complex128>\n*\n* var re = real( out );\n* // returns NaN\n*\n* var im = imag( out );\n* // returns NaN\n*/\nfunction cneg( z ) {\n\treturn new Complex128( -real( z ), -imag( z ) );\n}\n\n\n// EXPORTS //\n\nexport default cneg;\n"],"names":["cneg","z","Complex128","real","imag"],"mappings":";;mPAsFA,SAASA,EAAMC,GACd,OAAO,IAAIC,GAAaC,EAAMF,IAAMG,EAAMH,GAC3C"}